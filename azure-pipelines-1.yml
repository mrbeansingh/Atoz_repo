trigger: none

pool: Pipeline

variables:
  path: '$(System.DefaultWorkingDirectory)/Module'
  service-connection: 'raj-service'

steps:
# - task: TerraformInstaller@1
#   inputs:
#     terraformVersion: 'latest'
- task: AzurePowerShell@5
  inputs:
    azureSubscription: 'raj-service'
    ScriptType: 'InlineScript'
    Inline: |
      - powershell: |
          $tfVersion = "1.12.2"
          $tfUrl = "https://releases.hashicorp.com/terraform/$tfVersion/terraform_${tfVersion}_windows_amd64.zip"
          $tfZip = "$env:TEMP\terraform.zip"
          $tfExtract = "$env:USERPROFILE\terraform\$tfVersion"
      
          # Download Terraform zip
          Invoke-WebRequest -Uri $tfUrl -OutFile $tfZip
      
          # Create directory if not exists
          if (-Not (Test-Path $tfExtract)) {
              New-Item -ItemType Directory -Path $tfExtract | Out-Null
          }
      
          # Extract zip file (overwrite existing)
          Expand-Archive -Path $tfZip -DestinationPath $tfExtract -Force
      
          # Add extracted folder to PATH for current pipeline step
          Write-Host "##vso[task.prependpath]$tfExtract"
      
          # Verify terraform version
          terraform --version
        displayName: 'Manual Terraform Install via PowerShell'
        shell: pwsh

# Terraform Init
- task: TerraformTask@5
  displayName: 'Terraform Init'
  inputs:
    provider: 'azurerm'
    command: 'init'
    workingDirectory: $(path)
    backendServiceArm: '$(service-connection)'
    backendAzureRmResourceGroupName: 'raj-kumar-snatoshi'
    backendAzureRmStorageAccountName: 'rajkastorage1123'
    backendAzureRmContainerName: 'raj-dbba'
    backendAzureRmKey: 'dabba.tfstate'

# Terraform Plan
- task: TerraformTask@5
  displayName: 'Terraform Plan'
  name: terraformPlan  
  inputs:
    provider: 'azurerm'
    command: 'plan'
    workingDirectory: $(path)
    environmentServiceNameAzureRM: $(service-connection)

# Optional manual approval
# - task: ManualValidation@1
#   displayName: 'ðŸ›‘ Manual Approval Before Apply'
#   condition: succeeded('terraformPlan')
#   timeoutInMinutes: 60
#   inputs:
#     instructions: 'Review Terraform plan and approve to continue.'
#     notifyUsers: 'abhay.kumar.singh11sep@gmail.com'
#     onTimeout: 'reject'

# Terraform Apply
- task: TerraformTask@5
  displayName: 'Terraform Apply'
  condition: succeeded()
  inputs:
    provider: 'azurerm'
    command: 'apply'
    workingDirectory: $(path)
    environmentServiceNameAzureRM: $(service-connection)
    args: '-auto-approve'
